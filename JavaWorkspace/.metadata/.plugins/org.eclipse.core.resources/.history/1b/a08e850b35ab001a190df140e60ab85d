package Trees;
class Node{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree {
	Node root; //value will be updated here itself.
	BinaryTree()
	{
		root=null;
	}
	BinaryTree(int data)
	{
		this.root=new Node(data);
	}
	int TreeSum(Node root)
	{
		if(root==null) return 0;
		return root.data+TreeSum(root.left)+TreeSum(root.right);
	}
	int countNodes(Node root)
	{
		if(root==null) return 0;
		return 1+countNodes(root.left)+countNodes(root.right);
	}
	int leafNodes(Node root)
	{
		if(root==null) return 0;
		if(root.left==null && root.right==null) return 1;
		return leafNodes(root.left)+leafNodes(root.right);
	}
	int height(Node root)
	{
		if(root==null) return -1;
		return 1+Math.max(height(root.left), height(root.right));
	}
	void printAtLevel(Node root, int level)
	{
		if(root == null) return;
		if(level == 0) 
		{
			System.out.print(root.data+" ");
			return; // if printed then return
		}
		printAtLevel(root.left,level-1); //Same value of level passed
		printAtLevel(root.right,level-1); //Same value of level passed
	}
	void preorder(Node root)
	{
		if(root == null) return;
		System.out.print(root.data+" ");
		preorder(root.left); //go to LST
		preorder(root.right); //go to RST
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BinaryTree bt = new BinaryTree(2);//Binary Tree with root node 2
		bt.root.left = new Node(3);
		bt.root.right = new Node(5);
		bt.root.left.right = new Node(9);
		bt.root.right.left = new Node(7); // Required tree Created
//		bt.root.right.left.right = new Node(10);
		System.out.println("Sum of all Nodes: "+bt.TreeSum(bt.root));
		System.out.println("Total no. of Nodes: "+bt.countNodes(bt.root));
		System.out.println("Total no. of leaf Nodes: "+bt.leafNodes(bt.root));
		System.out.println("Height: "+bt.height(bt.root));
		bt.printAtLevel(bt.root, 0);
		System.out.println();
		bt.printAtLevel(bt.root, 1);
		System.out.println();
		bt.printAtLevel(bt.root, 2);
		System.out.println();
		bt.printAtLevel(bt.root, 3);
		System.out.println();
		System.out.print("PreOrder: ");
		bt.preorder(bt.root);
		System.out.println();
		System.out.print("InOrder: ");
		bt.inorder(bt.root);
		System.out.println();
	}
}
