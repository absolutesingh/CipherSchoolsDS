import java.io.*;
import java.util.*;
import java.lang.Math;
public class Source {
	//This problem is an extension to the conventional Coin Change Problem
	//This method returns the number of tickets we can buy without any haggle for change.	
	public static int ticket( int A[], int X )
    {  
        int m = A.length;
        // table[i] will be storing the number of solutions for 
        // value i. We need n+1 rows as the table is constructed 
        // in bottom up manner using the base case (n = 0) 
        
        int table[]=new int[X+1]; 
        
        // Base case (If given value is 0) 
        table[0] = 1; 
        
        // Pick all coins one by one and update the table[] values 
        // after the index greater than or equal to the value of the 
        // picked coin 
        for(int i=0; i<m; i++) 
            for(int j=A[i]; j<=X; j++) 
                table[j] += table[j-A[i]]; 
        // If 0 exists at any index in the table means we cannot get to that value 
        // using the denominations we have.
        //Sum variable stores such values we cannot buy.
        int sum = 0;
        for(int i=0;i<=X;i++)
        {
            if(table[i]==0) sum++;
        }
        //X-sum gives us the required count of amount we can buy.
        return X-sum;
    } 
	public static void main(String[] args){
		Scanner scan = new Scanner(System.in);
		int N;
		N=scan.nextInt(); 
		int[] A = new int[N]; 
		for(int j=0;j<N;j++){
			A[j]=scan.nextInt();
		}
		int X;
		X=scan.nextInt();
		int result;
		result = ticket(A,X);
		System.out.print(result);
		return;
	}
}